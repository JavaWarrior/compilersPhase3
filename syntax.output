Terminals unused in grammar

   FOR_WORD


Rules useless in parser due to conflicts

   35 b_expr_temp: %empty


State 42 conflicts: 1 shift/reduce
State 44 conflicts: 5 shift/reduce
State 45 conflicts: 5 shift/reduce
State 48 conflicts: 5 shift/reduce
State 59 conflicts: 5 shift/reduce


Grammar

    0 $accept: method_body $end

    1 @1: %empty

    2 method_body: @1 statement_list

    3 @2: %empty

    4 statement_list: @2 statement
    5               | statement_list statement

    6 statement: declaration

    7 @3: %empty

    8 statement: @3 if

    9 @4: %empty

   10 statement: @4 while
   11          | assignment
   12          | system_print

   13 declaration: primitive_type IDENTIFIER SEMI_COLON

   14 primitive_type: INT_WORD
   15               | FLOAT_WORD
   16               | BOOLEAN_WORD

   17 @5: %empty

   18 @6: %empty

   19 @7: %empty

   20 $@8: %empty

   21 @9: %empty

   22 if: @5 IF_WORD LEFT_BRACKET @6 b_expression RIGHT_BRACKET LEFT_BRACKET_CURLY @7 statement $@8 RIGHT_BRACKET_CURLY ELSE_WORD LEFT_BRACKET_CURLY @9 statement RIGHT_BRACKET_CURLY

   23 @10: %empty

   24 @11: %empty

   25 @12: %empty

   26 $@13: %empty

   27 while: @10 WHILE_WORD LEFT_BRACKET @11 b_expression RIGHT_BRACKET LEFT_BRACKET_CURLY @12 statement RIGHT_BRACKET_CURLY $@13

   28 assignment: IDENTIFIER EQUALS expression SEMI_COLON

   29 expression: FLOAT
   30           | INT
   31           | expression ARITH_OP expression
   32           | IDENTIFIER
   33           | LEFT_BRACKET expression RIGHT_BRACKET

   34 system_print: SYSTEM_OUT LEFT_BRACKET expression RIGHT_BRACKET SEMI_COLON

   35 b_expr_temp: %empty

   36 b_expression: BOOL

   37 @14: %empty

   38 b_expression: b_expr_temp b_expression BOOL_OP @14 b_expression
   39             | expression RELA_OP expression


Terminals, with rules where they appear

$end (0) 0
error (256)
INT (258) 30
FLOAT (259) 29
BOOL (260) 36
IDENTIFIER (261) 13 28 32
ARITH_OP (262) 31
RELA_OP (263) 39
BOOL_OP (264) 38
IF_WORD (265) 22
ELSE_WORD (266) 22
WHILE_WORD (267) 27
FOR_WORD (268)
INT_WORD (269) 14
FLOAT_WORD (270) 15
BOOLEAN_WORD (271) 16
SEMI_COLON (272) 13 28 34
EQUALS (273) 28
LEFT_BRACKET (274) 22 27 33 34
RIGHT_BRACKET (275) 22 27 33 34
LEFT_BRACKET_CURLY (276) 22 27
RIGHT_BRACKET_CURLY (277) 22 27
SYSTEM_OUT (278) 34


Nonterminals, with rules where they appear

$accept (24)
    on left: 0
method_body (25)
    on left: 2, on right: 0
@1 (26)
    on left: 1, on right: 2
statement_list (27)
    on left: 4 5, on right: 2 5
@2 (28)
    on left: 3, on right: 4
statement (29)
    on left: 6 8 10 11 12, on right: 4 5 22 27
@3 (30)
    on left: 7, on right: 8
@4 (31)
    on left: 9, on right: 10
declaration (32)
    on left: 13, on right: 6
primitive_type (33)
    on left: 14 15 16, on right: 13
if (34)
    on left: 22, on right: 8
@5 (35)
    on left: 17, on right: 22
@6 (36)
    on left: 18, on right: 22
@7 (37)
    on left: 19, on right: 22
$@8 (38)
    on left: 20, on right: 22
@9 (39)
    on left: 21, on right: 22
while (40)
    on left: 27, on right: 10
@10 (41)
    on left: 23, on right: 27
@11 (42)
    on left: 24, on right: 27
@12 (43)
    on left: 25, on right: 27
$@13 (44)
    on left: 26, on right: 27
assignment (45)
    on left: 28, on right: 11
expression (46)
    on left: 29 30 31 32 33, on right: 28 31 33 34 39
system_print (47)
    on left: 34, on right: 12
b_expr_temp (48)
    on left: 35, on right: 38
b_expression (49)
    on left: 36 38 39, on right: 22 27 38
@14 (50)
    on left: 37, on right: 38


State 0

    0 $accept: . method_body $end

    $default  reduce using rule 1 (@1)

    method_body  go to state 1
    @1           go to state 2


State 1

    0 $accept: method_body . $end

    $end  shift, and go to state 3


State 2

    2 method_body: @1 . statement_list

    $default  reduce using rule 3 (@2)

    statement_list  go to state 4
    @2              go to state 5


State 3

    0 $accept: method_body $end .

    $default  accept


State 4

    2 method_body: @1 statement_list .
    5 statement_list: statement_list . statement

    IDENTIFIER    shift, and go to state 6
    INT_WORD      shift, and go to state 7
    FLOAT_WORD    shift, and go to state 8
    BOOLEAN_WORD  shift, and go to state 9
    SYSTEM_OUT    shift, and go to state 10

    IF_WORD     reduce using rule 7 (@3)
    WHILE_WORD  reduce using rule 9 (@4)
    $default    reduce using rule 2 (method_body)

    statement       go to state 11
    @3              go to state 12
    @4              go to state 13
    declaration     go to state 14
    primitive_type  go to state 15
    assignment      go to state 16
    system_print    go to state 17


State 5

    4 statement_list: @2 . statement

    IDENTIFIER    shift, and go to state 6
    INT_WORD      shift, and go to state 7
    FLOAT_WORD    shift, and go to state 8
    BOOLEAN_WORD  shift, and go to state 9
    SYSTEM_OUT    shift, and go to state 10

    WHILE_WORD  reduce using rule 9 (@4)
    $default    reduce using rule 7 (@3)

    statement       go to state 18
    @3              go to state 12
    @4              go to state 13
    declaration     go to state 14
    primitive_type  go to state 15
    assignment      go to state 16
    system_print    go to state 17


State 6

   28 assignment: IDENTIFIER . EQUALS expression SEMI_COLON

    EQUALS  shift, and go to state 19


State 7

   14 primitive_type: INT_WORD .

    $default  reduce using rule 14 (primitive_type)


State 8

   15 primitive_type: FLOAT_WORD .

    $default  reduce using rule 15 (primitive_type)


State 9

   16 primitive_type: BOOLEAN_WORD .

    $default  reduce using rule 16 (primitive_type)


State 10

   34 system_print: SYSTEM_OUT . LEFT_BRACKET expression RIGHT_BRACKET SEMI_COLON

    LEFT_BRACKET  shift, and go to state 20


State 11

    5 statement_list: statement_list statement .

    $default  reduce using rule 5 (statement_list)


State 12

    8 statement: @3 . if

    $default  reduce using rule 17 (@5)

    if  go to state 21
    @5  go to state 22


State 13

   10 statement: @4 . while

    $default  reduce using rule 23 (@10)

    while  go to state 23
    @10    go to state 24


State 14

    6 statement: declaration .

    $default  reduce using rule 6 (statement)


State 15

   13 declaration: primitive_type . IDENTIFIER SEMI_COLON

    IDENTIFIER  shift, and go to state 25


State 16

   11 statement: assignment .

    $default  reduce using rule 11 (statement)


State 17

   12 statement: system_print .

    $default  reduce using rule 12 (statement)


State 18

    4 statement_list: @2 statement .

    $default  reduce using rule 4 (statement_list)


State 19

   28 assignment: IDENTIFIER EQUALS . expression SEMI_COLON

    INT           shift, and go to state 26
    FLOAT         shift, and go to state 27
    IDENTIFIER    shift, and go to state 28
    LEFT_BRACKET  shift, and go to state 29

    expression  go to state 30


State 20

   34 system_print: SYSTEM_OUT LEFT_BRACKET . expression RIGHT_BRACKET SEMI_COLON

    INT           shift, and go to state 26
    FLOAT         shift, and go to state 27
    IDENTIFIER    shift, and go to state 28
    LEFT_BRACKET  shift, and go to state 29

    expression  go to state 31


State 21

    8 statement: @3 if .

    $default  reduce using rule 8 (statement)


State 22

   22 if: @5 . IF_WORD LEFT_BRACKET @6 b_expression RIGHT_BRACKET LEFT_BRACKET_CURLY @7 statement $@8 RIGHT_BRACKET_CURLY ELSE_WORD LEFT_BRACKET_CURLY @9 statement RIGHT_BRACKET_CURLY

    IF_WORD  shift, and go to state 32


State 23

   10 statement: @4 while .

    $default  reduce using rule 10 (statement)


State 24

   27 while: @10 . WHILE_WORD LEFT_BRACKET @11 b_expression RIGHT_BRACKET LEFT_BRACKET_CURLY @12 statement RIGHT_BRACKET_CURLY $@13

    WHILE_WORD  shift, and go to state 33


State 25

   13 declaration: primitive_type IDENTIFIER . SEMI_COLON

    SEMI_COLON  shift, and go to state 34


State 26

   30 expression: INT .

    $default  reduce using rule 30 (expression)


State 27

   29 expression: FLOAT .

    $default  reduce using rule 29 (expression)


State 28

   32 expression: IDENTIFIER .

    $default  reduce using rule 32 (expression)


State 29

   33 expression: LEFT_BRACKET . expression RIGHT_BRACKET

    INT           shift, and go to state 26
    FLOAT         shift, and go to state 27
    IDENTIFIER    shift, and go to state 28
    LEFT_BRACKET  shift, and go to state 29

    expression  go to state 35


State 30

   28 assignment: IDENTIFIER EQUALS expression . SEMI_COLON
   31 expression: expression . ARITH_OP expression

    ARITH_OP    shift, and go to state 36
    SEMI_COLON  shift, and go to state 37


State 31

   31 expression: expression . ARITH_OP expression
   34 system_print: SYSTEM_OUT LEFT_BRACKET expression . RIGHT_BRACKET SEMI_COLON

    ARITH_OP       shift, and go to state 36
    RIGHT_BRACKET  shift, and go to state 38


State 32

   22 if: @5 IF_WORD . LEFT_BRACKET @6 b_expression RIGHT_BRACKET LEFT_BRACKET_CURLY @7 statement $@8 RIGHT_BRACKET_CURLY ELSE_WORD LEFT_BRACKET_CURLY @9 statement RIGHT_BRACKET_CURLY

    LEFT_BRACKET  shift, and go to state 39


State 33

   27 while: @10 WHILE_WORD . LEFT_BRACKET @11 b_expression RIGHT_BRACKET LEFT_BRACKET_CURLY @12 statement RIGHT_BRACKET_CURLY $@13

    LEFT_BRACKET  shift, and go to state 40


State 34

   13 declaration: primitive_type IDENTIFIER SEMI_COLON .

    $default  reduce using rule 13 (declaration)


State 35

   31 expression: expression . ARITH_OP expression
   33           | LEFT_BRACKET expression . RIGHT_BRACKET

    ARITH_OP       shift, and go to state 36
    RIGHT_BRACKET  shift, and go to state 41


State 36

   31 expression: expression ARITH_OP . expression

    INT           shift, and go to state 26
    FLOAT         shift, and go to state 27
    IDENTIFIER    shift, and go to state 28
    LEFT_BRACKET  shift, and go to state 29

    expression  go to state 42


State 37

   28 assignment: IDENTIFIER EQUALS expression SEMI_COLON .

    $default  reduce using rule 28 (assignment)


State 38

   34 system_print: SYSTEM_OUT LEFT_BRACKET expression RIGHT_BRACKET . SEMI_COLON

    SEMI_COLON  shift, and go to state 43


State 39

   22 if: @5 IF_WORD LEFT_BRACKET . @6 b_expression RIGHT_BRACKET LEFT_BRACKET_CURLY @7 statement $@8 RIGHT_BRACKET_CURLY ELSE_WORD LEFT_BRACKET_CURLY @9 statement RIGHT_BRACKET_CURLY

    $default  reduce using rule 18 (@6)

    @6  go to state 44


State 40

   27 while: @10 WHILE_WORD LEFT_BRACKET . @11 b_expression RIGHT_BRACKET LEFT_BRACKET_CURLY @12 statement RIGHT_BRACKET_CURLY $@13

    $default  reduce using rule 24 (@11)

    @11  go to state 45


State 41

   33 expression: LEFT_BRACKET expression RIGHT_BRACKET .

    $default  reduce using rule 33 (expression)


State 42

   31 expression: expression . ARITH_OP expression
   31           | expression ARITH_OP expression .

    ARITH_OP  shift, and go to state 36

    ARITH_OP  [reduce using rule 31 (expression)]
    $default  reduce using rule 31 (expression)


State 43

   34 system_print: SYSTEM_OUT LEFT_BRACKET expression RIGHT_BRACKET SEMI_COLON .

    $default  reduce using rule 34 (system_print)


State 44

   22 if: @5 IF_WORD LEFT_BRACKET @6 . b_expression RIGHT_BRACKET LEFT_BRACKET_CURLY @7 statement $@8 RIGHT_BRACKET_CURLY ELSE_WORD LEFT_BRACKET_CURLY @9 statement RIGHT_BRACKET_CURLY

    INT           shift, and go to state 26
    FLOAT         shift, and go to state 27
    BOOL          shift, and go to state 46
    IDENTIFIER    shift, and go to state 28
    LEFT_BRACKET  shift, and go to state 29

    INT           [reduce using rule 35 (b_expr_temp)]
    FLOAT         [reduce using rule 35 (b_expr_temp)]
    BOOL          [reduce using rule 35 (b_expr_temp)]
    IDENTIFIER    [reduce using rule 35 (b_expr_temp)]
    LEFT_BRACKET  [reduce using rule 35 (b_expr_temp)]

    expression    go to state 47
    b_expr_temp   go to state 48
    b_expression  go to state 49


State 45

   27 while: @10 WHILE_WORD LEFT_BRACKET @11 . b_expression RIGHT_BRACKET LEFT_BRACKET_CURLY @12 statement RIGHT_BRACKET_CURLY $@13

    INT           shift, and go to state 26
    FLOAT         shift, and go to state 27
    BOOL          shift, and go to state 46
    IDENTIFIER    shift, and go to state 28
    LEFT_BRACKET  shift, and go to state 29

    INT           [reduce using rule 35 (b_expr_temp)]
    FLOAT         [reduce using rule 35 (b_expr_temp)]
    BOOL          [reduce using rule 35 (b_expr_temp)]
    IDENTIFIER    [reduce using rule 35 (b_expr_temp)]
    LEFT_BRACKET  [reduce using rule 35 (b_expr_temp)]

    expression    go to state 47
    b_expr_temp   go to state 48
    b_expression  go to state 50


State 46

   36 b_expression: BOOL .

    $default  reduce using rule 36 (b_expression)


State 47

   31 expression: expression . ARITH_OP expression
   39 b_expression: expression . RELA_OP expression

    ARITH_OP  shift, and go to state 36
    RELA_OP   shift, and go to state 51


State 48

   38 b_expression: b_expr_temp . b_expression BOOL_OP @14 b_expression

    INT           shift, and go to state 26
    FLOAT         shift, and go to state 27
    BOOL          shift, and go to state 46
    IDENTIFIER    shift, and go to state 28
    LEFT_BRACKET  shift, and go to state 29

    INT           [reduce using rule 35 (b_expr_temp)]
    FLOAT         [reduce using rule 35 (b_expr_temp)]
    BOOL          [reduce using rule 35 (b_expr_temp)]
    IDENTIFIER    [reduce using rule 35 (b_expr_temp)]
    LEFT_BRACKET  [reduce using rule 35 (b_expr_temp)]

    expression    go to state 47
    b_expr_temp   go to state 48
    b_expression  go to state 52


State 49

   22 if: @5 IF_WORD LEFT_BRACKET @6 b_expression . RIGHT_BRACKET LEFT_BRACKET_CURLY @7 statement $@8 RIGHT_BRACKET_CURLY ELSE_WORD LEFT_BRACKET_CURLY @9 statement RIGHT_BRACKET_CURLY

    RIGHT_BRACKET  shift, and go to state 53


State 50

   27 while: @10 WHILE_WORD LEFT_BRACKET @11 b_expression . RIGHT_BRACKET LEFT_BRACKET_CURLY @12 statement RIGHT_BRACKET_CURLY $@13

    RIGHT_BRACKET  shift, and go to state 54


State 51

   39 b_expression: expression RELA_OP . expression

    INT           shift, and go to state 26
    FLOAT         shift, and go to state 27
    IDENTIFIER    shift, and go to state 28
    LEFT_BRACKET  shift, and go to state 29

    expression  go to state 55


State 52

   38 b_expression: b_expr_temp b_expression . BOOL_OP @14 b_expression

    BOOL_OP  shift, and go to state 56


State 53

   22 if: @5 IF_WORD LEFT_BRACKET @6 b_expression RIGHT_BRACKET . LEFT_BRACKET_CURLY @7 statement $@8 RIGHT_BRACKET_CURLY ELSE_WORD LEFT_BRACKET_CURLY @9 statement RIGHT_BRACKET_CURLY

    LEFT_BRACKET_CURLY  shift, and go to state 57


State 54

   27 while: @10 WHILE_WORD LEFT_BRACKET @11 b_expression RIGHT_BRACKET . LEFT_BRACKET_CURLY @12 statement RIGHT_BRACKET_CURLY $@13

    LEFT_BRACKET_CURLY  shift, and go to state 58


State 55

   31 expression: expression . ARITH_OP expression
   39 b_expression: expression RELA_OP expression .

    ARITH_OP  shift, and go to state 36

    $default  reduce using rule 39 (b_expression)


State 56

   38 b_expression: b_expr_temp b_expression BOOL_OP . @14 b_expression

    $default  reduce using rule 37 (@14)

    @14  go to state 59


State 57

   22 if: @5 IF_WORD LEFT_BRACKET @6 b_expression RIGHT_BRACKET LEFT_BRACKET_CURLY . @7 statement $@8 RIGHT_BRACKET_CURLY ELSE_WORD LEFT_BRACKET_CURLY @9 statement RIGHT_BRACKET_CURLY

    $default  reduce using rule 19 (@7)

    @7  go to state 60


State 58

   27 while: @10 WHILE_WORD LEFT_BRACKET @11 b_expression RIGHT_BRACKET LEFT_BRACKET_CURLY . @12 statement RIGHT_BRACKET_CURLY $@13

    $default  reduce using rule 25 (@12)

    @12  go to state 61


State 59

   38 b_expression: b_expr_temp b_expression BOOL_OP @14 . b_expression

    INT           shift, and go to state 26
    FLOAT         shift, and go to state 27
    BOOL          shift, and go to state 46
    IDENTIFIER    shift, and go to state 28
    LEFT_BRACKET  shift, and go to state 29

    INT           [reduce using rule 35 (b_expr_temp)]
    FLOAT         [reduce using rule 35 (b_expr_temp)]
    BOOL          [reduce using rule 35 (b_expr_temp)]
    IDENTIFIER    [reduce using rule 35 (b_expr_temp)]
    LEFT_BRACKET  [reduce using rule 35 (b_expr_temp)]

    expression    go to state 47
    b_expr_temp   go to state 48
    b_expression  go to state 62


State 60

   22 if: @5 IF_WORD LEFT_BRACKET @6 b_expression RIGHT_BRACKET LEFT_BRACKET_CURLY @7 . statement $@8 RIGHT_BRACKET_CURLY ELSE_WORD LEFT_BRACKET_CURLY @9 statement RIGHT_BRACKET_CURLY

    IDENTIFIER    shift, and go to state 6
    INT_WORD      shift, and go to state 7
    FLOAT_WORD    shift, and go to state 8
    BOOLEAN_WORD  shift, and go to state 9
    SYSTEM_OUT    shift, and go to state 10

    WHILE_WORD  reduce using rule 9 (@4)
    $default    reduce using rule 7 (@3)

    statement       go to state 63
    @3              go to state 12
    @4              go to state 13
    declaration     go to state 14
    primitive_type  go to state 15
    assignment      go to state 16
    system_print    go to state 17


State 61

   27 while: @10 WHILE_WORD LEFT_BRACKET @11 b_expression RIGHT_BRACKET LEFT_BRACKET_CURLY @12 . statement RIGHT_BRACKET_CURLY $@13

    IDENTIFIER    shift, and go to state 6
    INT_WORD      shift, and go to state 7
    FLOAT_WORD    shift, and go to state 8
    BOOLEAN_WORD  shift, and go to state 9
    SYSTEM_OUT    shift, and go to state 10

    WHILE_WORD  reduce using rule 9 (@4)
    $default    reduce using rule 7 (@3)

    statement       go to state 64
    @3              go to state 12
    @4              go to state 13
    declaration     go to state 14
    primitive_type  go to state 15
    assignment      go to state 16
    system_print    go to state 17


State 62

   38 b_expression: b_expr_temp b_expression BOOL_OP @14 b_expression .

    $default  reduce using rule 38 (b_expression)


State 63

   22 if: @5 IF_WORD LEFT_BRACKET @6 b_expression RIGHT_BRACKET LEFT_BRACKET_CURLY @7 statement . $@8 RIGHT_BRACKET_CURLY ELSE_WORD LEFT_BRACKET_CURLY @9 statement RIGHT_BRACKET_CURLY

    $default  reduce using rule 20 ($@8)

    $@8  go to state 65


State 64

   27 while: @10 WHILE_WORD LEFT_BRACKET @11 b_expression RIGHT_BRACKET LEFT_BRACKET_CURLY @12 statement . RIGHT_BRACKET_CURLY $@13

    RIGHT_BRACKET_CURLY  shift, and go to state 66


State 65

   22 if: @5 IF_WORD LEFT_BRACKET @6 b_expression RIGHT_BRACKET LEFT_BRACKET_CURLY @7 statement $@8 . RIGHT_BRACKET_CURLY ELSE_WORD LEFT_BRACKET_CURLY @9 statement RIGHT_BRACKET_CURLY

    RIGHT_BRACKET_CURLY  shift, and go to state 67


State 66

   27 while: @10 WHILE_WORD LEFT_BRACKET @11 b_expression RIGHT_BRACKET LEFT_BRACKET_CURLY @12 statement RIGHT_BRACKET_CURLY . $@13

    $default  reduce using rule 26 ($@13)

    $@13  go to state 68


State 67

   22 if: @5 IF_WORD LEFT_BRACKET @6 b_expression RIGHT_BRACKET LEFT_BRACKET_CURLY @7 statement $@8 RIGHT_BRACKET_CURLY . ELSE_WORD LEFT_BRACKET_CURLY @9 statement RIGHT_BRACKET_CURLY

    ELSE_WORD  shift, and go to state 69


State 68

   27 while: @10 WHILE_WORD LEFT_BRACKET @11 b_expression RIGHT_BRACKET LEFT_BRACKET_CURLY @12 statement RIGHT_BRACKET_CURLY $@13 .

    $default  reduce using rule 27 (while)


State 69

   22 if: @5 IF_WORD LEFT_BRACKET @6 b_expression RIGHT_BRACKET LEFT_BRACKET_CURLY @7 statement $@8 RIGHT_BRACKET_CURLY ELSE_WORD . LEFT_BRACKET_CURLY @9 statement RIGHT_BRACKET_CURLY

    LEFT_BRACKET_CURLY  shift, and go to state 70


State 70

   22 if: @5 IF_WORD LEFT_BRACKET @6 b_expression RIGHT_BRACKET LEFT_BRACKET_CURLY @7 statement $@8 RIGHT_BRACKET_CURLY ELSE_WORD LEFT_BRACKET_CURLY . @9 statement RIGHT_BRACKET_CURLY

    $default  reduce using rule 21 (@9)

    @9  go to state 71


State 71

   22 if: @5 IF_WORD LEFT_BRACKET @6 b_expression RIGHT_BRACKET LEFT_BRACKET_CURLY @7 statement $@8 RIGHT_BRACKET_CURLY ELSE_WORD LEFT_BRACKET_CURLY @9 . statement RIGHT_BRACKET_CURLY

    IDENTIFIER    shift, and go to state 6
    INT_WORD      shift, and go to state 7
    FLOAT_WORD    shift, and go to state 8
    BOOLEAN_WORD  shift, and go to state 9
    SYSTEM_OUT    shift, and go to state 10

    WHILE_WORD  reduce using rule 9 (@4)
    $default    reduce using rule 7 (@3)

    statement       go to state 72
    @3              go to state 12
    @4              go to state 13
    declaration     go to state 14
    primitive_type  go to state 15
    assignment      go to state 16
    system_print    go to state 17


State 72

   22 if: @5 IF_WORD LEFT_BRACKET @6 b_expression RIGHT_BRACKET LEFT_BRACKET_CURLY @7 statement $@8 RIGHT_BRACKET_CURLY ELSE_WORD LEFT_BRACKET_CURLY @9 statement . RIGHT_BRACKET_CURLY

    RIGHT_BRACKET_CURLY  shift, and go to state 73


State 73

   22 if: @5 IF_WORD LEFT_BRACKET @6 b_expression RIGHT_BRACKET LEFT_BRACKET_CURLY @7 statement $@8 RIGHT_BRACKET_CURLY ELSE_WORD LEFT_BRACKET_CURLY @9 statement RIGHT_BRACKET_CURLY .

    $default  reduce using rule 22 (if)
